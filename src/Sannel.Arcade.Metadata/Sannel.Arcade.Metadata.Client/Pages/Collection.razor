@page "/collection"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using Sannel.Arcade.Metadata.Client.Services
@using Sannel.Arcade.Metadata.Client.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]

<PageTitle>Game Collection</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
	<MudPaper Class="pa-6 mt-4" Elevation="4">
		<div class="d-flex align-center justify-space-between mb-4">
			<MudText Typo="Typo.h4">
				Game Collection
			</MudText>
			<MudButton Variant="Variant.Outlined"
					   Color="Color.Info"
					   OnClick="RefreshPlatforms"
					   Disabled="_isLoading"
					   StartIcon="@Icons.Material.Filled.Refresh">
				Refresh
			</MudButton>
		</div>

		<MudText Typo="Typo.body1" Class="mb-4">
			Browse your ROM collection by platform. Each platform shows the number of games with metadata.
		</MudText>

		@if (_isLoading)
		{
			<div class="d-flex justify-center align-center" style="height: 200px;">
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
			</div>
		}
		else if (!string.IsNullOrEmpty(_errorMessage))
		{
			<MudAlert Severity="Severity.Error" Class="mb-4">
				@_errorMessage
			</MudAlert>
			
			<div class="d-flex justify-center">
				<MudButton Variant="Variant.Filled"
						   Color="Color.Primary"
						   OnClick="NavigateToScan"
						   StartIcon="@Icons.Material.Filled.Search">
					Scan ROMs Collection
				</MudButton>
			</div>
		}
		else if (_platformsResponse.Success)
		{
			@if (_platformsResponse.Platforms.Count == 0)
			{
				<MudPaper Class="pa-8" Elevation="0">
					<div class="d-flex flex-column align-center">
						<MudIcon Icon="@Icons.Material.Filled.FolderOff" Size="Size.Large" Color="Color.Default" Class="mb-4" />
						<MudText Typo="Typo.h6" Color="Color.Default">
							No platforms found
						</MudText>
						<MudText Typo="Typo.body2" Color="Color.Default" Class="mt-2 mb-4">
							No ROM platforms were found in your configured ROMs directory.
						</MudText>
						<MudButton Variant="Variant.Filled"
								   Color="Color.Primary"
								   OnClick="NavigateToScan"
								   StartIcon="@Icons.Material.Filled.Search">
							Scan ROMs Collection
						</MudButton>
					</div>
				</MudPaper>
			}
			else
			{
				<MudGrid>
					@foreach (var platform in _platformsResponse.Platforms)
					{
						<MudItem xs="12" sm="6" md="4" lg="3">
							@{
								var platformImageUrl = GetPlatformImageUrl(platform.Name);
								var hasImage = !string.IsNullOrEmpty(platformImageUrl) && !_failedImages.Contains(platform.Name);
								var backgroundStyle = hasImage ? $"background-image: url('{platformImageUrl}'); background-size: cover; background-position: center; background-repeat: no-repeat;" : "";
							}
							<div class="platform-tile-container" @onclick="() => NavigateToGames(platform.Name)">
								<div class="platform-tile" style="@backgroundStyle">
									<div class="platform-overlay">
										@if (!hasImage)
										{
											<div class="platform-icon-container">
												<MudIcon Icon="@GetPlatformIcon(platform.Name)" Size="Size.Large" Color="Color.Primary" />
											</div>
										}
										<div class="platform-content">
											<MudText Typo="Typo.h6" Class="platform-name">
												@platform.Name
											</MudText>
											<MudChip T="string" Color="Color.Success" Variant="Variant.Filled" Size="Size.Small" Class="game-count-chip">
												@platform.GameCount games
											</MudChip>
										</div>
									</div>
									@if (hasImage)
									{
										<img src="@platformImageUrl" 
											 alt="@platform.Name cover" 
											 style="display: none;"
											 @onerror="@(() => HandleImageError(platform))" />
									}
								</div>
							</div>
						</MudItem>
					}
				</MudGrid>

				<MudDivider Class="my-6" />

				<div class="d-flex justify-center">
					<MudCard Class="pa-4" Elevation="2">
						<MudCardContent>
							<div class="d-flex align-center">
								<MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Info" Class="mr-3" />
								<div>
									<MudText Typo="Typo.body2">
										Total: <strong>@_platformsResponse.Platforms.Sum(p => p.GameCount)</strong> games across <strong>@_platformsResponse.Platforms.Count</strong> platforms
									</MudText>
									<MudText Typo="Typo.caption">
										Click on a platform to view its games, or scan your collection to add more metadata.
									</MudText>
								</div>
							</div>
						</MudCardContent>
					</MudCard>
				</div>
			}
		}
	</MudPaper>
</MudContainer>

<style>
	.platform-tile-container {
		width: 100%;
		aspect-ratio: 1 / 1;
		cursor: pointer;
		border-radius: 12px;
		overflow: hidden;
		box-shadow: 0 2px 8px rgba(0,0,0,0.1);
		transition: all 0.3s ease;
		position: relative;
	}

	.platform-tile-container:hover {
		transform: translateY(-4px);
		box-shadow: 0 8px 25px rgba(0,0,0,0.2);
	}

	.platform-tile {
		width: 100%;
		height: 100%;
		position: relative;
		display: flex;
		align-items: flex-end;
		background-color: #f5f5f5;
		transition: all 0.3s ease;
	}

	.platform-overlay {
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		background: linear-gradient(transparent, rgba(0,0,0,0.7));
		padding: 20px 16px 16px;
		color: white;
		display: flex;
		flex-direction: column;
		justify-content: flex-end;
		height: 100%;
	}

	.platform-tile:not([style*="background-image"]) .platform-overlay {
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		justify-content: center;
		align-items: center;
		text-align: center;
	}

	.platform-icon-container {
		flex: 1;
		display: flex;
		align-items: center;
		justify-content: center;
		margin-bottom: 8px;
	}

	.platform-content {
		display: flex;
		flex-direction: column;
		gap: 8px;
		align-items: flex-start;
	}

	.platform-tile:not([style*="background-image"]) .platform-content {
		align-items: center;
	}

	.platform-name {
		font-weight: 600;
		text-shadow: 0 2px 4px rgba(0,0,0,0.5);
		margin: 0;
	}

	.game-count-chip {
		background-color: rgba(76, 175, 80, 0.9) !important;
		color: white !important;
		font-weight: 500;
	}

	.platform-tile:hover {
		transform: scale(1.02);
	}

	.platform-tile-container:hover .platform-overlay {
		background: linear-gradient(transparent, rgba(0,0,0,0.8));
	}

	.platform-tile:not([style*="background-image"]):hover .platform-overlay {
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
	}
</style>

@code {
	private HashSet<string> _failedImages = new();

	private string? GetPlatformImageUrl(string platformName)
	{
		// Generate URL for the new platform image endpoint
		return $"/api/v1/metadata/platforms/{Uri.EscapeDataString(platformName)}/image";
	}

	private string GetPlatformIcon(string platformName)
	{
		return platformName.ToLowerInvariant() switch
		{
			"nes" => Icons.Material.Filled.Gamepad,
			"snes" => Icons.Material.Filled.SportsEsports,
			"n64" => Icons.Material.Filled.VideogameAsset,
			"wii" => Icons.Material.Filled.Gamepad,
			"wiiu" => Icons.Material.Filled.SportsEsports,
			"3ds" => Icons.Material.Filled.PhoneAndroid,
			_ => Icons.Material.Filled.VideogameAsset
		};
	}

	private void HandleImageError(PlatformInfo platform)
	{
		// Add platform to failed images set to prevent retry and show icon instead
		_failedImages.Add(platform.Name);
		StateHasChanged();
	}
}