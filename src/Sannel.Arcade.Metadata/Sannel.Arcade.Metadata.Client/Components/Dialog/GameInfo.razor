@using Sannel.Arcade.Metadata.Client.Models
@using MudBlazor
@using Sannel.Arcade.Metadata.Client.Services

<MudDialog>
	<TitleContent>
		<div class="d-flex align-center">
			<MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />
			<MudText Typo="Typo.h6">Edit Game: @(_editModel?.Name ?? "Game Information")</MudText>
		</div>
	</TitleContent>
	<DialogContent>
		@if (_isLoading)
		{
			<div class="d-flex justify-center align-center pa-8">
				<MudProgressCircular Indeterminate="true" />
				<MudText Class="ml-4">Loading game information...</MudText>
			</div>
		}
		else if (!string.IsNullOrEmpty(_errorMessage))
		{
			<MudAlert Severity="Severity.Error" Class="ma-4">
				@_errorMessage
			</MudAlert>
		}
		else if (_editModel != null)
		{
			<EditForm Model="_editModel" OnValidSubmit="SaveChanges">
				<DataAnnotationsValidator />
				<MudContainer Class="pa-0">
					<MudGrid>
						<!-- Cover Image and Basic Info -->
						<MudItem xs="12" md="4">
							@if (!string.IsNullOrEmpty(_editModel.CoverUrl))
							{
								<MudPaper Class="cover-image-container mb-3" Elevation="2">
									<img src="@GetImageUrl(_editModel.CoverUrl)" 
										 alt="@_editModel.Name cover" 
										 class="cover-image"
										 @onerror="@HandleCoverImageError" />
								</MudPaper>
							}
							else
							{
								<MudPaper Class="cover-image-container mb-3 d-flex align-center justify-center" Elevation="2">
									<MudIcon Icon="@Icons.Material.Filled.VideogameAsset" Size="Size.Large" Color="Color.Primary" />
								</MudPaper>
							}

							<!-- Editable Basic Info -->
							<MudStack Spacing="2">
								<MudTextField @bind-Value="_editModel.Region"
											  Label="Region"
											  Variant="Variant.Outlined"
											  FullWidth="true"
											  For="@(() => _editModel.Region)" />

								<MudTextField @bind-Value="_editModel.MetadataProvider"
											  Label="Metadata Provider"
											  Variant="Variant.Outlined"
											  FullWidth="true"
											  ReadOnly="true"
											  For="@(() => _editModel.MetadataProvider)" />

								<MudTextField @bind-Value="_editModel.RomFileName"
											  Label="ROM File"
											  Variant="Variant.Outlined"
											  FullWidth="true"
											  ReadOnly="true"
											  For="@(() => _editModel.RomFileName)" />
							</MudStack>
						</MudItem>

						<!-- Main Content -->
						<MudItem xs="12" md="8">
							<MudStack Spacing="3">
								<!-- Name -->
								<MudPaper Class="pa-3" Elevation="1">
									<MudTextField @bind-Value="_editModel.Name"
												  Label="Game Name"
												  Variant="Variant.Outlined"
												  FullWidth="true"
												  Required="true"
												  For="@(() => _editModel.Name)" />
								</MudPaper>

								<!-- Description -->
								<MudPaper Class="pa-3" Elevation="1">
									<MudText Typo="Typo.subtitle2" Class="mb-2">
										<MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" Class="mr-1" />
										Description
									</MudText>
									<MudTextField @bind-Value="_editModel.Description"
												  Variant="Variant.Outlined"
												  Lines="4"
												  FullWidth="true"
												  For="@(() => _editModel.Description)" />
								</MudPaper>

								<!-- Genres -->
								<MudPaper Class="pa-3" Elevation="1">
									<MudText Typo="Typo.subtitle2" Class="mb-2">
										<MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Small" Class="mr-1" />
										Genres
									</MudText>
									<div class="d-flex flex-wrap ga-2">
										@foreach (var genre in _editModel.Genres)
										{
											<MudChip T="string" Size="Size.Small" Color="Color.Primary" Variant="Variant.Outlined">
												@genre
												<MudIconButton Icon="@Icons.Material.Filled.Close" 
															   Size="Size.Small" 
															   OnClick="@(() => RemoveGenre(genre))"
															   Style="margin-left: 4px;" />
											</MudChip>
										}
									</div>
									<MudTextField @bind-Value="_newGenre"
												  Label="Add new genre"
												  Variant="Variant.Outlined"
												  FullWidth="true"
												  Class="mt-2"
												  Adornment="Adornment.End"
												  AdornmentIcon="@Icons.Material.Filled.Add"
												  OnAdornmentClick="AddGenre"
												  @onkeypress="@((e) => { if (e.Key == "Enter") AddGenre(); })" />
								</MudPaper>

								<!-- Alternate Names -->
								<MudPaper Class="pa-3" Elevation="1">
									<MudText Typo="Typo.subtitle2" Class="mb-2">
										<MudIcon Icon="@Icons.Material.Filled.AlternateEmail" Size="Size.Small" Class="mr-1" />
										Alternate Names
									</MudText>
									<MudTextField @bind-Value="_alternateNamesText"
												  Variant="Variant.Outlined"
												  Lines="2"
												  FullWidth="true"
												  HelperText="Enter alternate names separated by commas"
												  For="@(() => _alternateNamesText)" />
								</MudPaper>

								<!-- Videos (Read-only) -->
								@if (_editModel.VideoUrls.Count > 0)
								{
									<MudPaper Class="pa-3" Elevation="1">
										<MudText Typo="Typo.subtitle2" Class="mb-2">
											<MudIcon Icon="@Icons.Material.Filled.VideoFile" Size="Size.Small" Class="mr-1" />
											Videos (@_editModel.VideoUrls.Count) - Read Only
										</MudText>
										<div class="image-grid">
											@foreach (var videoUrl in _editModel.VideoUrls)
											{
												<div class="thumbnail-container">
													<iframe width="420" height="236"
															src="@videoUrl">
													</iframe>
												</div>
											}
										</div>
									</MudPaper>
								}

								<!-- Artwork Images -->
								@if (_editModel.ArtworkUrls.Count > 0)
								{
									<MudPaper Class="pa-3" Elevation="1">
										<MudText Typo="Typo.subtitle2" Class="mb-2">
											<MudIcon Icon="@Icons.Material.Filled.Palette" Size="Size.Small" Class="mr-1" />
											Artwork (@_editModel.ArtworkUrls.Count)
										</MudText>
										<div class="image-grid">
											@foreach (var artworkUrl in _editModel.ArtworkUrls)
											{
												<div class="thumbnail-container" @onclick="@(() => ShowImagePreview(artworkUrl, _editModel.Name + " Artwork"))">
													<img src="@GetImageUrl(artworkUrl)" 
														 alt="@_editModel.Name artwork" 
														 class="thumbnail-image"
														 @onerror="@(() => HandleImageError(artworkUrl))" />
												</div>
											}
										</div>
									</MudPaper>
								}

								<!-- Screenshots -->
								@if (_editModel.ScreenShots.Count > 0)
								{
									<MudPaper Class="pa-3" Elevation="1">
										<MudText Typo="Typo.subtitle2" Class="mb-2">
											<MudIcon Icon="@Icons.Material.Filled.Screenshot" Size="Size.Small" Class="mr-1" />
											Screenshots (@_editModel.ScreenShots.Count)
										</MudText>
										<div class="image-grid">
											@foreach (var screenshotUrl in _editModel.ScreenShots)
											{
												<div class="thumbnail-container" @onclick="@(() => ShowImagePreview(screenshotUrl, _editModel.Name + " Screenshot"))">
													<img src="@GetImageUrl(screenshotUrl)"
															  alt = "@_editModel.Name screenshot"
															  class= "thumbnail-image"
														 @onerror="@(() => HandleImageError(screenshotUrl))" />
												</div>
											}
										</div>
									</MudPaper>
								}

							</MudStack>
						</MudItem>
					</MudGrid>
				</MudContainer>
			</EditForm>
		}
		else
		{
			<MudText>No game metadata available.</MudText>
		}
	</DialogContent>
	<DialogActions>
		<MudButton Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
		<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveChanges" Disabled="_isSaving">
			@if (_isSaving)
			{
				<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
				<MudText Class="ms-2">Saving...</MudText>
			}
			else
			{
				<MudText>Save</MudText>
			}
		</MudButton>
	</DialogActions>
</MudDialog>

<style>
	.cover-image-container {
		width: 100%;
		aspect-ratio: 3 / 4;
		min-height: 200px;
		background-color: #f5f5f5;
		border-radius: 8px;
		overflow: hidden;
	}

	.cover-image {
		width: 100%;
		height: 100%;
		object-fit: cover;
		border-radius: 8px;
	}

	.image-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
		gap: 12px;
		margin-top: 8px;
	}

	.thumbnail-container {
		position: relative;
		aspect-ratio: 16 / 9;
		background-color: #f5f5f5;
		border-radius: 6px;
		overflow: hidden;
		cursor: pointer;
		transition: transform 0.2s ease, box-shadow 0.2s ease;
		border: 1px solid #e0e0e0;
	}

	.thumbnail-container:hover {
		transform: scale(1.05);
		box-shadow: 0 4px 12px rgba(0,0,0,0.15);
		z-index: 1;
	}

	.thumbnail-image {
		width: 100%;
		height: 100%;
		object-fit: cover;
		border-radius: 6px;
	}

	.thumbnail-image[src=""] {
		display: none;
	}

	.thumbnail-container:has(.thumbnail-image[src=""]):before {
		content: "🖼️";
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		font-size: 24px;
		color: #999;
	}
</style>

@code {
	[CascadingParameter]
	private IMudDialogInstance MudDialog { get; set; } = null!;

	[Inject]
	private IMetadataService MetadataService { get; set; } = null!;

	private GameMetadata? GameMetadata { get; set; }
	private GameMetadata? _editModel { get; set; }

	[Parameter]
	public string? PlatformName { get; set; } = null;

	[Parameter]
	public string? GameId { get; set; } = null;

	private HashSet<string> _failedImages = new();
	private bool _isLoading = false;
	private bool _isSaving = false;
	private string _errorMessage = string.Empty;
	private string _successMessage = string.Empty;

	// Genre management
	private string _newGenre = string.Empty;

	// Alternate names as text
	private string _alternateNamesText = string.Empty;

	protected override async Task OnParametersSetAsync()
	{
		if (!string.IsNullOrEmpty(PlatformName) && !string.IsNullOrEmpty(GameId))
		{
			await LoadGameMetadata();
		}
	}

	private async Task LoadGameMetadata()
	{
		_isLoading = true;
		_errorMessage = string.Empty;
		GameMetadata = null;
		StateHasChanged();

		try
		{
			GameMetadata = await MetadataService.GetGameAsync(PlatformName!, GameId!);
			if (GameMetadata == null)
			{
				_errorMessage = "Game metadata not found.";
			}
			else
			{
				// Create editable copy
				_editModel = new GameMetadata
				{
					Id = GameMetadata.Id,
					Name = GameMetadata.Name,
					Description = GameMetadata.Description,
					MetadataProvider = GameMetadata.MetadataProvider,
					ProviderId = GameMetadata.ProviderId,
					CoverUrl = GameMetadata.CoverUrl,
					ArtworkUrls = new List<string>(GameMetadata.ArtworkUrls),
					ScreenShots = new List<string>(GameMetadata.ScreenShots),
					VideoUrls = new List<string>(GameMetadata.VideoUrls),
					Genres = new List<string>(GameMetadata.Genres),
					AlternateNames = new List<string>(GameMetadata.AlternateNames),
					Region = GameMetadata.Region,
					RomFilePath = GameMetadata.RomFilePath,
					RelativePath = GameMetadata.RelativePath,
					RomFileName = GameMetadata.RomFileName
				};

				// Initialize form data
				_alternateNamesText = string.Join(", ", _editModel.AlternateNames);
			}
		}
		catch (Exception ex)
		{
			_errorMessage = $"Error loading game metadata: {ex.Message}";
		}
		finally
		{
			_isLoading = false;
			StateHasChanged();
		}
	}

	private async Task SaveChanges()
	{
		if (_editModel == null || PlatformName == null || GameId == null) return;

		_isSaving = true;
		_errorMessage = string.Empty;
		_successMessage = string.Empty;
		StateHasChanged();

		try
		{
			// Update alternate names from text
			_editModel.AlternateNames = _alternateNamesText
				.Split(',', StringSplitOptions.RemoveEmptyEntries)
				.Select(s => s.Trim())
				.Where(s => !string.IsNullOrEmpty(s))
				.ToList();

			var success = await MetadataService.UpdateGameAsync(PlatformName, GameId, _editModel);

			if (success)
			{
				_successMessage = "Game metadata updated successfully!";
				// Close dialog with success result
				MudDialog.Close(DialogResult.Ok(true));
			}
			else
			{
				_errorMessage = "Failed to update game metadata. Please try again.";
			}
		}
		catch (Exception ex)
		{
			_errorMessage = $"Error saving game metadata: {ex.Message}";
		}
		finally
		{
			_isSaving = false;
			StateHasChanged();
		}
	}

	private void Cancel() => MudDialog.Close(DialogResult.Cancel());

	private void AddGenre()
	{
		if (!string.IsNullOrWhiteSpace(_newGenre) && _editModel != null)
		{
			var genre = _newGenre.Trim();
			if (!_editModel.Genres.Contains(genre))
			{
				_editModel.Genres.Add(genre);
				_newGenre = string.Empty;
				StateHasChanged();
			}
		}
	}

	private void RemoveGenre(string genre)
	{
		if (_editModel != null)
		{
			_editModel.Genres.Remove(genre);
			StateHasChanged();
		}
	}

	private void HandleCoverImageError()
	{
		StateHasChanged();
	}

	private void HandleImageError(string imageUrl)
	{
		_failedImages.Add(imageUrl);
		StateHasChanged();
	}

	private void ShowImagePreview(string imageUrl, string title)
	{
		if (_failedImages.Contains(imageUrl)) return;

		var parameters = new DialogParameters
		{
			["ImageUrl"] = imageUrl,
			["Title"] = title
		};

		var options = new DialogOptions
		{
			MaxWidth = MaxWidth.Large,
			FullWidth = true,
			CloseButton = true
		};
	}

	private string GetImageUrl(string imageName)
		=> $"/api/v1/metadata/platforms/{Uri.EscapeDataString(PlatformName)}/games/{Uri.EscapeDataString(GameId)}/images/{Uri.EscapeDataString(imageName)}";
}
